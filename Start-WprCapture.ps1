<#PSScriptInfo

.VERSION 1.1

.GUID 05913506-04ff-4b1f-94bc-a6f5ed3d8d6b

.AUTHOR oaltawil@microsoft.com

.RELEASENOTES Added the Registry profile to the wpr capture command

#>

<#

.Description
    This script captures detailed debugging information about the operating system using the Windows Performance Recorder utility (wpr.exe). 
    
    More specifically, the script runs WPR to capture CPU utilization, Disk I/O activity, File I/O activity, Registry activity, Network activity, and Mini-Filter Driver activity for 1 minute.

    WPR saves the generated event trace log file (.etl) in the folder specified by the "WprFolderPath" parameter.

.Parameter WprFolderPath
    Full path of the folder where .etl files generated by the Windows Performance Recorder utility are saved

.Example
    Capture an event trace log for 1 minute using the Windows Performance Recorder utility and save the generated .etl file in the "C:\WPRFiles" folder

    PS C:\> Start-WprCapture.ps1 -WprFolderPath "C:\WPRFiles"

#>

param (
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    $WprFolderPath
)

# Verify whether the path passed to the WprFolderPath parameter is valid
if (-not (Test-Path -Path $WprFolderPath)) 
{
    
    Write-Host "The path specified $WprFolderPath does not exist. Creating the folder ..."
    
    # Create the folder if it does not exist
    New-Item -Path $WprFolderPath -ItemType Directory -Force

}

Start-Transcript -Path (Join-Path -Path $WprFolderPath -ChildPath "Start-WprCapture.log")

# Retrieve all files with an .etl extension
$EtlFiles = Get-ChildItem $WprFolderPath -Filter "*.etl"

# Maintain a maximum of 3 .etl files at any time
if ($EtlFiles.count -gt 2)
{

    Write-Host "There are currently $($EtlFiles.count) .etl files in the $WprFolderPath folder"

    # Clear the automatic error variable: $Error
    $Error.PSBase.Clear()

    # Sort the .etl files by their last modified timestamp and select the oldest (N - 2) files, where N is the total number of .etl files 
    $OldEtlFiles = $EtlFiles | Sort-Object -Property LastWriteTime -Descending | Select-Object -Last ($EtlFiles.count - 2)
    
    # Delete the oldest file(s)
    $OldEtlFiles | ForEach-Object {Remove-Item -Path $_.FullName -Force}
    
    # If no errors happened during the previous commands; i.e. the last error object $Error[0] is null. 
    # Please note that the expression (-not null) evaluates to true
    if (-not $Error[0])
    {
        Write-Host "Successfully deleted the oldest $($EtlFiles.count - 2) file(s): $($OldEtlFiles.Name)"
    }
    else {

        Write-Host "Failed to delete the oldest $($EtlFiles.count - 2) file(s). Skipping file clean-up for now ..."
    }

}

# Place all wpr.exe commands inside a try-catch block for error handling and logging
try 
{
    # Run the Windows Performance Recorder and collect CPU, Disk I/O, Network, and Mini-Filter (Driver) usage
    wpr.exe -start GeneralProfile -start CPU -start DiskIO -start FileIO -start Registry -start Network -start minifilter -filemode

    # Verify whether wpr.exe started recording
    if ($(wpr.exe -status) -contains "WPR recording is in progress...")
    {

        Write-Host "Successfully started the WPR recording"
    
    }

    Write-Host "`nSleeping for 60 seconds"

    # Run the capture for 1 minute only
    Start-Sleep -Seconds 60 

    # The generated event trace log file will be named "<ComputerName>_<DateTimeStamp>.etl"
    $EtlFilePath = Join-Path -Path $WprFolderPath -ChildPath "$($ENV:ComputerName)_$(Get-Date -Format FileDateTime).etl"
    
    # Stop the capture and save the .etl file
    wpr.exe -stop $EtlFilePath

    # Verify whether the previous command succeeded (the automatic variable '?' stores the exit status of the last command executed) AND verify whether the .etl file has been successfully saved
    if (($?) -and (Test-Path $EtlFilePath)) 
    {

        Write-Host "Successfully stopped the WPR recording and saved the event trace log file to $EtlFilePath`n"

    }

}

catch [System.SystemException]
{
    Write-Host "The Windows Performance Recorder utility encountered an error and could not complete the requested operation. More detailed logging is required`n"
}

finally
{

    Stop-Transcript

}
